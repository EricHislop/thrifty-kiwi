[{"content":"In this multipart series, we will explore how to automate affiliate marketing by generating engaging Pinterest descriptions using GPT-3.5 Turbo and automating the pin creation process. This is Part 1, where we\u0026rsquo;ll cover using GPT-3.5 Turbo to generate descriptions and processing the input CSV file.\nCheck out my Pinterest pins to see the results of this automation tool in action.\nIntroduction Affiliate marketing can be a lucrative way to earn passive income. One popular platform for promoting affiliate links is Pinterest. However, manually creating and managing pins can be time-consuming. In this blog post, we will discuss how to automate this process using OpenAI\u0026rsquo;s GPT-3.5 Turbo and some other tools.\nGPT-3.5 Turbo is a powerful language model developed by OpenAI. It can be used for various tasks, including generating human-like text. We will use it to create engaging and informative descriptions for our Pinterest pins.\nOverview of the Project Our project involves the following steps:\nRead data from a CSV file containing affiliate link names and URLs (obtained from Rakuten Advertising) Generate Pinterest descriptions for each link using GPT-3.5 Turbo Shorten the URLs using the Bitly API (To be covered in Part 2) Create pins on Pinterest using the Pinterest API (To be covered in Part 2) Check image availability for each pin (To be covered in Part 2) Update the original CSV file with the generated descriptions In this first part of the series, we\u0026rsquo;ll focus on steps 1, 2, and 6.\nSetting Up the Environment Before we begin, make sure you have the following prerequisites installed:\nNode.js npm (Node Package Manager) We\u0026rsquo;ll also be using the following libraries:\ncsv-parser axios csv-writer To install these libraries, run the following command:\nnpm install csv-parser axios csv-writer\nReading Data from a CSV File First, we need to read the data from the CSV file containing affiliate link names and URLs. We\u0026rsquo;ll use the csv-parser library to parse the file and store its content in an array.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 async function parseCSV(csvFile) { const data = []; return new Promise((resolve, reject) =\u0026gt; { fs.createReadStream(csvFile) .pipe(csvParser()) .on(\u0026#39;data\u0026#39;, (row) =\u0026gt; { // Add \u0026#39;Link Name\u0026#39; and \u0026#39;URL\u0026#39; fields to the row object row[\u0026#39;Link Name\u0026#39;] = row[\u0026#39;LINK NAME\u0026#39;]; row[\u0026#39;URL\u0026#39;] = row[\u0026#39;LINK CODE\u0026#39;].match(/href=\u0026#34;(.*?)\u0026#34;/)[1]; data.push(row); }) .on(\u0026#39;end\u0026#39;, () =\u0026gt; { resolve(data); }) .on(\u0026#39;error\u0026#39;, (error) =\u0026gt; { reject(error); }); }); } Generating Pinterest Descriptions with GPT-3.5 Turbo Next, we\u0026rsquo;ll create a function that takes an affiliate link name as input and generates a Pinterest description using the GPT-3.5 Turbo model. This will help make your pins more engaging and informative, increasing the likelihood of users clicking on your affiliate links.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 async function generateDescription(linkName) { const prompt = `Generate a Pinterest description for the following link name: \u0026#34;${linkName}\u0026#34;. The description should be engaging and informative, suitable for a Pinterest pin.`; const maxRetries = 3; let retries = 0; while (retries \u0026lt; maxRetries) { try { const response = await axios.post(openaiEndpoint, { model: \u0026#39;gpt-3.5-turbo\u0026#39;, messages: [ { role: \u0026#39;user\u0026#39;, content: prompt, }, ], temperature: 0.8, }, { headers: { \u0026#39;Content-Type\u0026#39;: \u0026#39;application/json\u0026#39;, \u0026#39;Authorization\u0026#39;: `Bearer ${openaiApiKey}`, }, }); return response.data.choices[0].message.content.trim(); } catch (error) { if (error.response \u0026amp;\u0026amp; error.response.status === 429) { retries++; console.log(`Error 429: Too many requests. Retrying in ${2 ** retries} seconds...`); await sleep(1000 * (2 ** retries)); } else { console.error(`Error while generating description: ${error}`); throw error; } } } throw new Error(\u0026#39;Failed to generate description after maximum retries.\u0026#39;); } Updating the Original CSV File Finally, we\u0026rsquo;ll update the original CSV file with the generated descriptions using the csv-writer library.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 async function writeOutputCSV(row, filePath) { const csvWriter = createCsvWriter({ path: filePath, append: true, header: [ { id: \u0026#39;Link Name\u0026#39;, title: \u0026#39;Link Name\u0026#39; }, { id: \u0026#39;URL\u0026#39;, title: \u0026#39;URL\u0026#39; }, { id: \u0026#39;DESCRIPTION\u0026#39;, title: \u0026#39;Description\u0026#39; }, { id: \u0026#39;PROCESSED\u0026#39;, title: \u0026#39;Processed\u0026#39; } ], }); return csvWriter.writeRecords([{ \u0026#39;Link Name\u0026#39;: row[\u0026#39;Link Name\u0026#39;], \u0026#39;URL\u0026#39;: row[\u0026#39;URL\u0026#39;], \u0026#39;DESCRIPTION\u0026#39;: row[\u0026#39;DESCRIPTION\u0026#39;], \u0026#39;PROCESSED\u0026#39;: row[\u0026#39;PROCESSED\u0026#39;] }]); } Now, let\u0026rsquo;s put it all together in a main function.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 async function main() { try { const csvFile = \u0026#39;csv/links.csv\u0026#39;; const csvData = await parseCSV(csvFile); console.log(csvData); for (const row of csvData) { await sleep(5000); // Add a 5-second delay between each API call const description = await generateDescription(row[\u0026#39;LINK NAME\u0026#39;]); console.log(`Generated description for ${row[\u0026#39;LINK NAME\u0026#39;]}: ${description}`); row[\u0026#39;PROCESSED\u0026#39;] = \u0026#39;Yes\u0026#39;; row[\u0026#39;DESCRIPTION\u0026#39;] = description; await writeOutputCSV(row, \u0026#39;csv/results.csv\u0026#39;); } console.log(\u0026#39;Results CSV file updated with descriptions.\u0026#39;); } catch (error) { console.error(\u0026#39;Error:\u0026#39;, error); } } In Part 2, we\u0026rsquo;ll cover the remaining steps, including shortening URLs using the Bitly API, creating pins on Pinterest, and checking image availability for each pin. Stay tuned for more on how to automate your Pinterest affiliate marketing efforts using GPT-3.5 Turbo!\n","date":"2023-04-21T16:42:30+12:00","image":"http://thriftykiwi.com/p/creating-a-pinterest-affiliate-marketing-automation-tool-using-gpt-3.5-turbo-part-1/cover_hub5b971c06b5dd13137d4690e20226aad_1206974_120x120_fill_box_smart1_3.png","permalink":"http://thriftykiwi.com/p/creating-a-pinterest-affiliate-marketing-automation-tool-using-gpt-3.5-turbo-part-1/","title":"Creating a Pinterest Affiliate Marketing Automation Tool using GPT-3.5 Turbo (Part 1)"},{"content":"How to Build a Subscription Sharing App with React, AWS Amplify, and GraphQL In this tutorial, we\u0026rsquo;ll build a web application for tracking and sharing subscription services like Netflix, Spotify, and YouTube. We\u0026rsquo;ll use React for the frontend, AWS Amplify for the backend, and GraphQL for our API.\nPrerequisites Basic knowledge of JavaScript and React An AWS account Node.js and npm installed on your machine Step 1: Set Up Your React App Create a new React app using npx create-react-app kiwishare Change to the project directory:\ncd kiwishare\nInstall the necessary dependencies:\nnpm install aws-amplify @aws-amplify/ui-react\nStep 2: Install and Configure the Amplify CLI Install the Amplify CLI globally:\nnpm install -g @aws-amplify/cli\nConfigure the Amplify CLI with your AWS account:\namplify configure\nFollow the prompts to complete the configuration process.\nStep 3: Initialize Amplify amplify init\nFollow the prompts to complete the Amplify initialization process.\nStep 4: Add Auth and API Add authentication to your app:\namplify add auth\nAdd a GraphQL API:\namplify add api\nChoose the \u0026ldquo;Amazon DynamoDB\u0026rdquo; as the data source.\nStep 5: Define Your GraphQL Schema Edit the schema.graphql file to define the data model for your app:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 type StreamingService @model @auth(rules: [{ allow: owner }]) { id: ID! name: String! description: String price: Float! sharings: [Sharing] @hasMany(indexName: \u0026#34;byStreamingService\u0026#34;, fields: [\u0026#34;id\u0026#34;]) } type Sharing @model @auth(rules: [{ allow: owner }]) { id: ID! title: String! streamingServiceID: ID! @index(name: \u0026#34;byStreamingService\u0026#34;) streamingService: StreamingService! @belongsTo(fields: [\u0026#34;streamingServiceID\u0026#34;]) } Step 6: Deploy Your Backend amplify push\nThis command will create and configure the necessary backend resources in your AWS account.\nStep 7: Update Your React App Integrate Amplify into your React app by adding the necessary imports and configurations.\nStep 8: Run Your App npm start\nYour app should now be running on http://localhost:3000. You can now sign up, sign in, and start using the app to track and share subscription services!\nConclusion In this tutorial, we built a subscription sharing app using React, AWS Amplify, and GraphQL. We learned how to set up a React app, configure Amplify, define a GraphQL schema, and deploy our backend to AWS. This is just the beginning – you can now customize and expand your app to add more features and functionality!\nHappy coding! 🚀\n","date":"2023-03-23T22:14:39+13:00","image":"http://thriftykiwi.com/p/aws-amplify-react/cover_huf71f5f0b46c979756ead3006b3f61821_1658298_120x120_fill_box_smart1_3.png","permalink":"http://thriftykiwi.com/p/aws-amplify-react/","title":"Aws Amplify React"},{"content":"Setting Up Hugo Theme Stack Hugo is a fast and flexible static site generator that allows you to build websites quickly and easily. One of the many benefits of using Hugo is the variety of themes available. In this tutorial, we will cover the setup process for the Stack theme, which is a modern and elegant theme that is perfect for building portfolios, personal websites, and blogs.\nPrerequisites Before getting started, you will need to have the following software installed on your computer:\nGit Go Hugo Setup To get started, you\u0026rsquo;ll need to create a new repository on GitHub and use the Stack theme starter template. To do this, follow these steps:\nClick the \u0026ldquo;Use this template\u0026rdquo; button on the Stack theme starter template repository.\nName your repository and click \u0026ldquo;Create repository from template\u0026rdquo;.\nClone the repository to your local machine using Git.\nRun hugo server to start the local development server and see the default Stack theme in action.\nSetting Up Favicon To set up a custom favicon for your Hugo site, follow these steps:\nCreate an SVG file with the desired icon. For example: 1 2 3 \u0026lt;svg xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34;\u0026gt; \u0026lt;text y=\u0026#34;26\u0026#34; font-size=\u0026#34;26\u0026#34;\u0026gt;🥝\u0026lt;/text\u0026gt; \u0026lt;/svg\u0026gt; On Windows you can press the Windows key and . to bring up emojis to use as a favicon.\nSave the SVG file as favicon.svg in the static directory of your Hugo project.\nAdd the following link tag to the layouts/partials/head/custom.html file:\n\u0026lt;link rel=\u0026quot;icon\u0026quot; type=\u0026quot;image/svg+xml\u0026quot; href=\u0026quot;/favicon.svg\u0026quot;\u0026gt;\nRun hugo server to view the site with the custom favicon.\nHosting on GitHub Pages To host your Hugo site on GitHub Pages, follow these steps:\nPush your changes to the repository on GitHub. In the repository settings, navigate to the \u0026ldquo;Pages\u0026rdquo; section. Under \u0026ldquo;Source\u0026rdquo;, select the branch you want to deploy (usually main) and click \u0026ldquo;Save\u0026rdquo;. Wait a few minutes for GitHub Pages to build and deploy your site. Visit https://\u0026lt;your-username\u0026gt;.github.io/\u0026lt;your-repository-name\u0026gt;/ in your browser to see your site live on GitHub Pages. Conclusion In this tutorial, we covered the setup process for the Stack theme in Hugo. We also showed you how to set up a custom favicon and host your Hugo site on GitHub Pages. With this knowledge, you should be able to build a beautiful and functional website using Hugo and the Stack theme. Happy building!\n","date":"2023-03-20T23:37:10+13:00","image":"http://thriftykiwi.com/p/setting-up-a-hugo-stacks-blog/programmers_desk_with_lots_of_computer_screens_hu8cd86060b13bbb691a1171900c8ebb35_609186_120x120_fill_box_smart1_3.png","permalink":"http://thriftykiwi.com/p/setting-up-a-hugo-stacks-blog/","title":"Setting Up a Hugo Stacks Blog"},{"content":"How to Save Money at Waitomo Petrol Stations Waitomo petrol stations offer a unique opportunity for customers to save money on fuel purchases. If you fill up with $100, for example, you can spin the wheel five times and potentially save up to $15 on your fuel purchase.\nWaitomo App Loyalty Program Waitomo has a mobile app that allows you to take advantage of their loyalty program. Here\u0026rsquo;s how it works:\nDownload the Waitomo app and create an account.\nOnce at the pump, select $20 in the app and fill up your vehicle.\nPut the gas hose back in the machine and return to the app to spin the wheel for a chance to win Waitomo Moolah.\nIf you win, the prize will be automatically added to your Waitomo Moolah wallet in the app and will be auto-redeemed on your next in-app purchase at a Waitomo Fuel Stop.\nRepeat the process by paying for another $20 of fuel each time to spin the wheel and potentially win more Waitomo Moolah.\nWaitomo SCRATCH to Win Promotion In addition to their loyalty program, Waitomo also offers a promotion called \u0026ldquo;Waitomo SCRATCH to Win.\u0026rdquo; Here are the details:\nPurchase $150 or more via in-app purchases within a calendar month to unlock the opportunity to SCRATCH to win.\nYour in-app spending will reset back to zero at the end of each calendar month.\nIf you win, the prize will be automatically added to your Waitomo Moolah wallet in the app and will be auto-redeemed on your next in-app purchase at a Waitomo Fuel Stop.\nFrom time to time, Waitomo may change the minimum spend value to unlock the SCRATCH to win.\nTerms and Conditions Before participating in the loyalty program or promotions, be sure to read and understand the Waitomo App Terms and Conditions and FAQ.\nHappy saving!\n","date":"2023-03-18T22:54:21+13:00","image":"http://thriftykiwi.com/p/waitomo-deal/cover_hu9fadbb6e73751dbaeff6d6b3478a9cb0_1086593_120x120_fill_box_smart1_3.png","permalink":"http://thriftykiwi.com/p/waitomo-deal/","title":"Waitomo Deal"},{"content":"","date":"0001-01-01T00:00:00Z","permalink":"http://thriftykiwi.com/p/","title":""}]